---
import { twMerge } from 'tailwind-merge';
import type {CallToAction, Image as ImageType } from "yt-astro-ui/types";
import Image from 'yt-astro-ui/astro/image/Image.astro';
import { Button } from "yt-astro-ui/svelte/button/index";

export interface Props {
  class?: string;
  image: ImageType | string;
  title?: string;
  description?: string;
  callToAction?: CallToAction;
}

const {
  class: className = '',
  image,
  title = await Astro.slots.render('title'),
  description = await Astro.slots.render('description'),
  callToAction,
} = Astro.props;

const heroImageUrl = typeof image === 'string' ? image : image?.src;
---

<div class={twMerge('swiper-slide overflow-hidden bg-zinc-700 text-zinc-200 dark:bg-card dark:text-card-foreground', className)}>
  <a href={callToAction ? callToAction.href : '#'} class="slide flex flex-col-reverse justify-between md:flex-row h-full">
    <div class="w-full h-full flex items-center justify-center">
      <div class="p-6 md:px-12 lg:px-20 xl:px-24 w-full h-full md:h-auto">
        <slot />
        {
          title && description && (
            <div class="flex flex-col h-full justify-between">
              <div class="mb-6">
                <h3 class="text-white text-base md:text-lg xl:text-2xl font-medium md:font-semibold mb-2">{title}</h3>
                <p class="text-sm md:text-base xl:text-lg">{description}</p>
              </div>
              {callToAction && (
                <Button type="button" {...callToAction} class={twMerge("transition hover:translate-y-0.5 w-full", callToAction?.class)} />
              )}
            </div>
          )
        }
      </div>
    </div>
    <div class="w-full h-40 md:h-auto">
      {
        heroImageUrl && (
          <Image
            src={heroImageUrl}
            class="w-full md:h-full bg-gray-400 dark:bg-slate-700"
            widths={[400, 900]}
            width={400}
            sizes="(max-width: 900px) 400px, 900px"
            alt={title}
            aspectRatio="16:9"
            layout="cover"
            loading="lazy"
            decoding="async"
          />
        )
      }
    </div>
  </a>
</div>
